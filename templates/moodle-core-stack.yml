---
AWSTemplateFormatVersion: '2010-09-09'

Description:  A stack for deploying moodle cluster. 
              https://github.com/aws-samples/aws-refarch-wordpress
              https://www.gosquared.com/blog/simple-high-availability-wordpress-hosting-on-aws

Parameters:
  env:
    Description: Environment name to provision resources
    Type: String
    AllowedValues: ["dev", "prod"]
    Default: dev
  project:
    Description: Project name to provision resources
    Type: String
    Default: moodle
  VpcStackName:
    Description: moodle vpc stack name
    Type: String
    AllowedValues: ["moodle-vpc-stack-dev", "moodle-vpc-stack-prod"]
    Default: moodle-vpc-stack-dev

  # ec2 instance parameters
  ImageId:
    Description: AMI ID 
    Type: String
    Default: ami-08fdde86b93accf1c

  KeyName:
    Description: EC2 instance key name
    Type: String
    Default: moodle-keypair
 
  # moodle instances parameters
  MoodleInstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.nano

  ALBExistingCertArn:
    Type: 'String'
    Default: 'arn:aws:acm:ap-southeast-2:692083082426:certificate/54eca3ca-4204-4d5b-9214-d17380c238c3'

Mappings:
  DnsName:
    dev: 
      Name: dev.mymlearning.com
    prod: 
      Name: www.mymlearning.com

Resources:

  # EFS
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'project', !Ref 'env', 'FileSystem' ] ]
        - Key: Createdby
          Value: !Ref 'AWS::StackName'
  MountTarget0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'FileSystem'
      SubnetId: 
        Fn::ImportValue: 
          !Join ['-', [!Ref 'VpcStackName', 'PrivateSubnet0']]
      SecurityGroups: 
        - Fn::ImportValue: 
            !Join ['-', [!Ref 'VpcStackName', 'MountTargetSG']]
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'FileSystem'
      SubnetId: 
        Fn::ImportValue: 
          !Join ['-', [!Ref 'VpcStackName', 'PrivateSubnet1']]      
      SecurityGroups: 
        - Fn::ImportValue: 
            !Join ['-', [!Ref 'VpcStackName', 'MountTargetSG']]      

  # Auto scaling group
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: moodle-instance-role-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribePolicies
              - autoscaling:UpdateAutoScalingGroup
            Resource: '*'

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: FileSystem
    Properties:
      Cooldown: 60
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: 2
      MinSize: 1
      DesiredCapacity: 1
      TargetGroupARNs: 
        - !Ref PublicAlbTargetGroup
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'project', !Ref 'env', 'ASG' ] ]
          PropagateAtLaunch: true
      VPCZoneIdentifier: 
        - Fn::ImportValue: 
            !Join ['-', [!Ref 'VpcStackName', 'PrivateSubnet0']]
        - Fn::ImportValue: 
            !Join ['-', [!Ref 'VpcStackName', 'PrivateSubnet1']]
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT59M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        WaitOnResourceSignals: true
        MaxBatchSize : 1
        MinInstancesInService: 1
        PauseTime: PT59M
  AutoScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 60
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 10
            VolumeType: gp2
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ImageId
      InstanceMonitoring: true
      InstanceType: !Ref MoodleInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Fn::ImportValue: 
            !Join ['-', [!Ref 'VpcStackName', 'MoodleHostsSG']]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          yum update -y
          yum install -y gcc
          yum install -y nfs-utils
          systemctl start nfs
          systemctl enable nfs
          yum install -y amazon-efs-utils

          yum -y install httpd
          systemctl start httpd
          systemctl enable httpd
          
          amazon-linux-extras disable php7.2
          amazon-linux-extras disable lamp-mariadb10.2-php7.2
          amazon-linux-extras enable php7.3
          yum clean metadata
          amazon-linux-extras install -y php7.3
          yum install -y php-devel php-xml php-pecl-zip php-gd php-intl php-mbstring php-xmlrpc php-soap php-opcache
          sed -i 's/post_max_size = 8M/post_max_size = 1G/g' /etc/php.ini
          sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 1G/g' /etc/php.ini
          sed -i 's/max_execution_time = 30/max_execution_time = 600/g' /etc/php.ini
          amazon-linux-extras disable php7.3

          wget https://pecl.php.net/get/redis-5.2.1.tgz
          tar -xvf redis-5.2.1.tgz
          cd /redis-5.2.1
          phpize
          ./configure
          make
          make install
          echo ';redis' >> /etc/php.d/60-redis.ini
          echo 'extension=redis.so' >> /etc/php.d/60-redis.ini
          systemctl restart httpd
          mkdir /moodle
          mount -t efs ${FileSystem}:/ /moodle  
          if [ -f "/moodle/code/index.php" ]; then 
            cp -ar /moodle/code/* /var/www/html
          fi          
          if [ -f "/moodle/conf/config.php" ]; then 
            cp /moodle/conf/config.php /var/www/html/config.php
          fi
          if [ -f "/moodle/conf/.htaccess" ]; then 
            cp /moodle/conf/.htaccess /var/www/html/.htaccess
          fi
          
          echo '<?php phpinfo(); ?>' > /var/www/html/phpinfo.php
          chown -R nobody.apache /var/www
          chmod -R 777 /var/www
          echo '*/1 * * * * /usr/bin/php  /var/www/html/admin/cli/cron.php >/dev/null' >> /var/spool/cron/apache

          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
  
  # Public application load balancer
  PublicAlb: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: 
            !Join ['-', [!Ref 'VpcStackName', 'PublicSubnet0']]
        - Fn::ImportValue: 
            !Join ['-', [!Ref 'VpcStackName', 'PublicSubnet1']]
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      SecurityGroups:
        - Fn::ImportValue: 
            !Join ['-', [!Ref 'VpcStackName', 'PublicAlbSG']]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'project', !Ref 'env', 'PublicAlb' ] ]
        - Key: Createdby
          Value: !Ref 'AWS::StackName'

  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'AWS::StackName', 'drop-1']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: 
        Fn::ImportValue: 
          !Join ['-', [!Ref 'VpcStackName', 'Vpc']]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'project', !Ref 'env', 'DummyTargetGroupPublic' ] ]
        - Key: Createdby
          Value: !Ref 'AWS::StackName'

  PublicLoadBalancerListenerSSL:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - PublicAlb
    Properties:
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'DummyTargetGroupPublic'
      Certificates:
        - CertificateArn: !Ref ALBExistingCertArn
      SslPolicy: ELBSecurityPolicy-2016-08
      LoadBalancerArn: !Ref 'PublicAlb'
      Port: 443
      Protocol: HTTPS
  
  PublicLoadBalancerlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: 'redirect'
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref 'PublicAlb'
      Port: 80
      Protocol: HTTP

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  PublicAlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /phpinfo.php
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join [ '-', [ !Ref 'project', !Ref 'env', 'TargetGroup' ] ]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: 
        Fn::ImportValue: 
          !Join ['-', [!Ref 'VpcStackName', 'Vpc']]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'project', !Ref 'env', 'TargetGroup' ] ]
        - Key: Createdby
          Value: !Ref 'AWS::StackName'

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'PublicAlbTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [ '*' ]
      ListenerArn: !Ref PublicLoadBalancerListenerSSL
      Priority: 1 

  # Create DNS record set
  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: mymlearning.com.
      Comment: Zone mymlearning alias targeted to PublicAlb LoadBalancer.
      RecordSets:
      - Name: !Join ['.', [!FindInMap [DnsName, !Ref env, Name] , '' ]]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'PublicAlb.CanonicalHostedZoneID'
          DNSName: !GetAtt 'PublicAlb.DNSName'

Outputs:
  FileSystemID:
    Description: File system ID
    Value: !Ref FileSystem
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'FileSystemID' ] ]  
  MountTarget0ID:
    Description: Mount target 0 ID
    Value: !Ref MountTarget0
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'MountTarget0ID' ] ]
  MountTarget1ID:
    Description: Mount target 1 ID
    Value: !Ref MountTarget1
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'MountTarget1ID' ] ]

  PublicAlbName:
    Value: !GetAtt PublicAlb.LoadBalancerName
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PublicAlbName' ] ]
  PublicAlbDnsName:
    Value: !GetAtt PublicAlb.DNSName
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PublicAlbDnsName' ] ]
  PublicAlbCanonicalHostedZoneID:
    Value: !GetAtt PublicAlb.CanonicalHostedZoneID
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PublicAlbCanonicalHostedZoneID' ] ]
  PublicAlbHostname:
    Value: !Join [ '', [ 'https://', !GetAtt PublicAlb.DNSName ] ]
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PublicAlbHostname' ] ]
  PublicAlbHealthCheck:
    Value: !Join [ '', [ 'https://', !GetAtt PublicAlb.DNSName, '/phpinfo.php' ] ]
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PublicAlbHealthCheck' ] ]
  PublicAlbTargetGroupArn:
    Value: !Ref PublicAlbTargetGroup
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'PublicAlbTargetGroupArn' ] ]

  DNSRecordSetGroupName:
    Value: !Ref DNS
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'DNSRecordSetGroupName' ] ]
